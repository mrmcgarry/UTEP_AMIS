queue()	// Will load the following instructions until after the page has loaded

.defer(d3.csv, "asnum.csv", function(d) {	// d3.csv will be the function that will be called when the page has finished loading
  return {
    startIP: +d.startIP,		// This callback functions modifies the content generated by d3.csv, in this case it parses all the numbers
    endIP: +d.endIP,
    asNum: +d.asNum,
    organization: d.organization
  };
})

.await(function(error, file1) { 	// Sets the callback to be invoked when all deferred tasks have finished, i.e., the callback function will execute after d3.csv and its callback are executed.

	console.log(file1);		// Log the resulting JSON object that results from the defered d3.csv method.

	$('#dotsearchbutton').on('click', function(){	// Set a click event listener for the button that corresponds to the decimal dotted notation IP addr search, this triggers searchIP()
		searchIP( file1, $('#searchtermdot').attr('id') );	// searchIP accepts the input database and a CSS identifier for the search term
		//console.log($(this).attr('id'));
	});
	$('#decsearchbutton').on('click', function(){	// Same event listener but for the decimal IP address search
		searchIP( file1, $('#searchtermdec').attr('id') );
	});

});

function searchIP( data, identification ) {

	if (identification == "searchtermdot"){	// This will execute if the search is done from the dotted decimal notation IP address field
		var term = $('#searchtermdot').val(),
			ipelem = term.match(/[0-9]{1,3}/gi),	// Matches the inputted string with a reg exp pattern to search through it
			j = 4;
		
// The following lines are where the IP address is converted into decimal. The formula used is: octet1*(256^3) + octet2*(256^2) + octet3*(256^1) + octet4*(256^0) = decimal IP address
		for(var i=0; i<ipelem.length; i++){	// This loop loops through the search term, it takes each decimal number from the IP address and stores it in an array for processing later.
			j--;
			ipelem[i] = +ipelem[i];
			if(j>=0){
				ipelem[i] *= Math.pow(256,j);	// This is step one in converting a dotted decimal IP address into a full decimal IP address
			}
		}
		
		var decimalIP = ipelem.reduce(function(previousValue, currentValue, currentIndex, array) {
			return previousValue + currentValue;	// This reduces the resulting array into a single value by summing every element together.
		});
		
		console.log(term, ipelem, decimalIP);
	}
	else if (identification == "searchtermdec"){	// Run if searching a decimal IP address, this only converts the decimal IP address into dotted decimal notation for display purposes
		//console.log(typeof $('#searchtermdec').val() == 'string');
		var term = $('#searchtermdec').val(),
			decimalIP = +term,
			mask = [4278190080, 16711680, 65280, 255], // This mask comes from the decimal values of 32 consecutive ones divided into bytes mask[0] = 11111111 00000000 00000000 00000000 and so on.
			j = 24,
			ipelem = [],
			ipaddr = "";
		
		for(var i=0; i<=3; i++){	// This loop applies the mask to the search term in order to convert it into dotted decimal notation
			ipelem[i] = ((decimalIP & mask[i]) >>> j).toString(10);	// The first  mask is applied to the decimal IP and then shifted (with carry) j times to only conserve the selected byte.
			j -= 8;	// Next operation will be on the next byte.
			if(i != 3) ipaddr += ipelem[i] + ".";	// Add a dot after the result to make the dotted decimal IP address string only if this isn't the last iteration
			else ipaddr += ipelem[i];	// if it is the last iteration don't add the dot.
		}
		//console.log(decimalIP.toString(2), mask[0].toString(2), ((decimalIP & mask[0])>>>24).toString(2) );
		console.log(ipelem, ipaddr);
	}
	// The result will be a string with the dotted decimal IP.
	
	
	var found = false;
	
	for(i=0; i<data.length; i++){	// This loop simply searches through the JSON object given as the first parameter of this function.
		if(decimalIP >= data[i].startIP && decimalIP <= data[i].endIP){
			//console.log("found at" + " " + i);
			found = true;	// If the term is found, set 'found' to true and break out of the loop.
			break;
		}
		else{
			found = false;
		}
	}
	
	// If the search term is is dotted decimal and is found, add a div that displays the result with its decimal IP address equivalent.
	// If the search term is decimal and is found, add the same div with the dotted decimal equivalent of the IP address and its information.
	// If either search term isn't found, simply display 'Not Found'
	if(found && identification == "searchtermdot") $('#resultcontainer p').text("IPv4 address " + term + " (" + decimalIP + ") " + "found as " + data[i].organization + " with Autonomous System number " + data[i].asNum);
	else if(found && identification == "searchtermdec") $('#resultcontainer p').text("IPv4 address " + term + " (" + ipaddr + ") " + "found as " + data[i].organization + " with Autonomous System number " + data[i].asNum);
	else $('#resultcontainer p').text("Not found");
}

/*

https://www.countryipblocks.net/ip-address-conversion-to-decimal-and-binary-equivalents
1.0.48.0
129.108.0.0 to 129.108.255.255
https://github.com/d3/d3-queue queue documentation

*/